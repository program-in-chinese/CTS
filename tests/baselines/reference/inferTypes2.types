=== tests/cases/conformance/types/conditional/inferTypes2.ts ===
// Repros from #22755

export declare function foo<T>(obj: T): T extends () => infer P ? P : never;
>foo : <T>(obj: T) => T extends () => infer P ? P : never
>T : T
>obj : T
>T : T
>T : T
>P : P
>P : P

export function bar<T>(obj: T) {
>bar : <T>(obj: T) => T extends () => infer P ? P : never
>T : T
>obj : T
>T : T

    return foo(obj);
>foo(obj) : T extends () => infer P ? P : never
>foo : <T>(obj: T) => T extends () => infer P ? P : never
>obj : T
}

export type BadNested<T> = { x: T extends number ? T : string };
>BadNested : BadNested<T>
>T : T
>x : T extends number ? T : string
>T : T
>T : T

export declare function foo2<T>(obj: T): T extends { [K in keyof BadNested<infer P>]: BadNested<infer P>[K] } ? P : never;
>foo2 : <T>(obj: T) => T extends { x: infer P extends number ? infer P : string; } ? P : never
>T : T
>obj : T
>T : T
>T : T
>K : K
>BadNested : BadNested<T>
>P : P
>BadNested : BadNested<T>
>P : P
>K : K
>P : P

export function bar2<T>(obj: T) {
>bar2 : <T>(obj: T) => T extends { x: infer P extends number ? infer P : string; } ? P : never
>T : T
>obj : T
>T : T

    return foo2(obj);
>foo2(obj) : T extends { x: infer P extends number ? infer P : string; } ? P : never
>foo2 : <T>(obj: T) => T extends { x: infer P extends number ? infer P : string; } ? P : never
>obj : T
}

