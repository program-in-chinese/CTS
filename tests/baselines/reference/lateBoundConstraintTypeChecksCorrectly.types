=== tests/cases/compiler/lateBoundConstraintTypeChecksCorrectly.ts ===
declare const fooProp: unique symbol;
>fooProp : unique symbol

declare const barProp: unique symbol;
>barProp : unique symbol

type BothProps = typeof fooProp | typeof barProp;
>BothProps : unique symbol | unique symbol
>fooProp : unique symbol
>barProp : unique symbol

export interface Foo<T> {
>Foo : Foo<T>
>T : T

  [fooProp]: T;
>[fooProp] : T
>fooProp : unique symbol
>T : T

  [barProp]: string;
>[barProp] : string
>barProp : unique symbol
}

function f<T extends Foo<number>>(x: T) {
>f : <T extends Foo<number>>(x: T) => void
>T : T
>Foo : Foo<T>
>x : T
>T : T

    const abc = x[fooProp]; // expected: 'T[typeof fooProp]'
>abc : number
>x[fooProp] : number
>x : T
>fooProp : unique symbol

    /**
     * Expected: no error
     */
    const def: T[typeof fooProp] = x[fooProp];
>def : T[unique symbol]
>T : T
>fooProp : unique symbol
>x[fooProp] : number
>x : T
>fooProp : unique symbol

    const def2: T[typeof barProp] = x[barProp];
>def2 : T[unique symbol]
>T : T
>barProp : unique symbol
>x[barProp] : string
>x : T
>barProp : unique symbol
}

